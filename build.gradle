import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'com.github.johnrengelman.shadow' version "${shadowVersion}"
    id 'io.gitlab.arturbosch.detekt' version "${detektVersion}"
    id 'net.researchgate.release' version "${releasePluginVersion}"
}

tasks.register('reportMerge', ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif") // or "reports/detekt/merge.sarif"
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: "io.gitlab.arturbosch.detekt"

    repositories {
        mavenCentral()
        maven { url 'https://m2.dv8tion.net/releases' }
        maven { url 'https://jitpack.io' }
        maven { url "https://m2.chew.pro/snapshots" }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoroutinesVersion}"
        detekt "io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}"
        detekt "io.gitlab.arturbosch.detekt:detekt-cli:${detektVersion}"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitVersion}"
        api group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    }

    test {
        useJUnitPlatform()
        systemProperty "junit.jupiter.testinstance.lifecycle.default", "per_class"
    }

    group = 'com.dongtronic.diabot'

    sourceCompatibility = 17
    targetCompatibility = 17

    detekt {
        buildUponDefaultConfig = true // preconfigure defaults
        allRules = false // activate all available (even unstable) rules.
        config = files("$rootDir/config/detekt/detekt.yml")
        // point to your custom config defining rules to run, overwriting default behavior
        baseline = file("config/detekt/baseline.xml")

        source = objects.fileCollection().from(
                "src/main/java",
                "src/test/java"
//                "bot/src/main/java",
//                "bg-graph/src/main/java",
//                "nightscout-api/src/main/java",
//                "utilities/src/main/java"
        )

        autoCorrect(true)

        reports {
            html.enabled = true // observe findings in your browser with structure and code snippets
            xml.enabled = false // checkstyle like format mainly for integrations like Jenkins
            txt.enabled = true
            sarif.enabled = true
            // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
//            sarif {
//                enabled = true
//                destination = file("$rootDir/detekt.sarif.json")
//            }
        }

        plugins.withType(DetektPlugin) {
            tasks.withType(Detekt) { detektTask ->
                finalizedBy(reportMerge)

                reportMerge.configure { mergeTask ->
                    mergeTask.input.from(detektTask.sarifReportFile) // or detektTask.sarifReportFile
                }
            }
        }
    }
}


task stage(dependsOn: ['clean', 'shadowJar'])

shadowJar {
    exclude 'logback-test.xml'
    archiveBaseName.set('diabot')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes(
                'Implementation-Title': 'Diabot - a diabetes Discord bot',
                'Implementation-Version': this.version,
                'Main-Class': 'com.dongtronic.diabot.Main',
                // fixes retrofit v2.8 reflection warnings
                'Add-Opens': 'java.base/java.lang.invoke'
        )
    }
}

release {
    tagTemplate = 'v$version'
    git {
        requireBranch.set('main')
        signTag.set(true)
        ignoredSnapshotDependencies = [ "pw.chew:jda-chewtils" ]
    }
}

dependencies {
    implementation project(path: ':bot')
}
