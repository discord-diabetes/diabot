plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'io.gitlab.arturbosch.detekt' version '1.18.1'
}

allprojects {
    apply plugin: "kotlin"

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    }

    group = 'com.dongtronic.diabot'
    version = '1.14.0'

    sourceCompatibility = 11
    targetCompatibility = 11

    // from: https://kotlinlang.org/docs/reference/using-gradle.html
    //noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        //noinspection GrUnresolvedAccess
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    detekt {
        buildUponDefaultConfig = true // preconfigure defaults
        allRules = false // activate all available (even unstable) rules.
        config = files("$rootDir/config/detekt/detekt.yml")
        // point to your custom config defining rules to run, overwriting default behavior
        baseline = file("$rootDir/config/detekt/baseline.xml")

        source = objects.fileCollection().from(
                "src/main/java",
                "src/test/java"
        )

        reports {
            html.enabled = true // observe findings in your browser with structure and code snippets
            xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
            txt.enabled = true
            // similar to the console output, contains issue signature to manually edit baseline files
            sarif.enabled = true
            // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
            sarif {
                enabled = true
                destination = file("$rootDir/detekt.sarif.json")
            }
        }
    }
}

task stage(dependsOn: ['clean', 'shadowJar'])

shadowJar {
    exclude 'logback-test.xml'
    archiveBaseName.set('diabot')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes(
                'Implementation-Title': 'Diabot - a diabetes Discord bot',
                'Implementation-Version': this.version,
                'Main-Class': 'com.dongtronic.diabot.Main',
                // fixes retrofit v2.8 reflection warnings
                'Add-Opens': 'java.base/java.lang.invoke'
        )
    }
}

dependencies {
    implementation project(path: ':bot')
}