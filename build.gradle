import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java'
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.shadow)
    alias(libs.plugins.detekt)
    alias(libs.plugins.release)
}

tasks.register('reportMerge', ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif") // or "reports/detekt/merge.sarif"
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: "io.gitlab.arturbosch.detekt"

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url = 'https://m2.chew.pro/releases' }
    }

    dependencies {
        implementation libs.kotlin.stdlib
        implementation libs.kotlin.reflect
        implementation libs.coroutines.core
        implementation libs.coroutines.reactor

        detekt libs.detekt.formatting
        detekt libs.detekt.cli

        testImplementation libs.junit.engine
        testImplementation libs.junit.params

        api libs.slf4j.api
    }

    test {
        useJUnitPlatform()
        systemProperty "junit.jupiter.testinstance.lifecycle.default", "per_class"
    }

    java {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
    }

    kotlin {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_21
        }
    }

    group = "com.dongtronic.diabot"

    detekt {
        buildUponDefaultConfig = true // preconfigure defaults
        allRules = false // activate all available (even unstable) rules.
        config = files("$rootDir/config/detekt/detekt.yml")
        // point to your custom config defining rules to run, overwriting default behavior
        baseline = file("config/detekt/baseline.xml")
        
        source = objects.fileCollection().from(
                "src/main/java",
                "src/test/java"
//                "bot/src/main/java",
//                "bg-graph/src/main/java",
//                "nightscout-api/src/main/java",
//                "utilities/src/main/java"
        )

        autoCorrect = true

        reports {
            html.enabled = true // observe findings in your browser with structure and code snippets
            xml.enabled = false // checkstyle like format mainly for integrations like Jenkins
            txt.enabled = true
            sarif.enabled = true
            // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
//            sarif {
//                enabled = true
//                destination = file("$rootDir/detekt.sarif.json")
//            }
        }

        plugins.withType(DetektPlugin) {
            tasks.withType(Detekt) { detektTask ->
                finalizedBy(reportMerge)

                reportMerge.configure { mergeTask ->
                    mergeTask.input.from(detektTask.sarifReportFile) // or detektTask.sarifReportFile
                }
            }
        }
    }
}

tasks.register("stage") {
    dependsOn("clean", "shadowJar")
}

shadowJar {
    exclude "logback-test.xml"
    archiveBaseName.set("diabot")
    archiveClassifier.set("")
    archiveVersion.set("")
    manifest {
        attributes(
                "Implementation-Title": "Diabot - a diabetes Discord bot",
                "Implementation-Version": this.version,
                "Main-Class": "com.dongtronic.diabot.Main",
                // fixes retrofit v2.8 reflection warnings
                "Add-Opens": "java.base/java.lang.invoke"
        )
    }
}

release {
    tagTemplate = "v$version"
    git {
        requireBranch.set("main")
        signTag.set(true)
        ignoredSnapshotDependencies = ["pw.chew:jda-chewtils"]
    }
}

dependencies {
    implementation project(path: ":bot")
}
